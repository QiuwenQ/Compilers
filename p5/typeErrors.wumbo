//Test that type errors are caught correctly
int x;
int y;
bool a;
bool b;
struct Point1{
	int z;
	bool c;	
};
struct Point2{
	int z;
	bool c;	
};
int f1(){}
int f2(){}
int f3(int x, bool a){
	
}
void f4(){}
bool f5(){}
int func1(){
	struct Point1 p1;
	struct Point2 p2;
		//equals errors
	x=a; //error: Type mismatch
	b=y; //error: Type mismatch
	p1.z = p2.c; //error: Type mismatch
	Point1 = Point2; //error: Struct name assignment
	Point1 = Point2 = Point1; //error: Struct name assignment
	p1=p2; //error: Struct variable assignment
	p1=p2=p1; //error: Struct variable assignment
	f1=f2; //error: Function assignment
	f1=f2=f2; //error: Function assignment
		//error: Arithmetic operator applied to non-numeric operand
	x=false+1; 
	x=1+false; 
	x=1+true+"string"; 
	x=1-true;
	x=1/true;
	x=1*true;
	x=1+2*"string";
	a++;
	p2.c++;
	a--;
	p2.c--;
		//unary minus
	x=-false;
	x=-(p1.c*p2.c);
	x=-(1/a);
		//error: Relational operator applied to non-numeric operand"
	a=1<true;
	a=true<1;
	a=true<false;
	a=1>true;
	a=true>1;
	a=true>false;
	a=1<=true;
	a=true<=1;
	a=true<=false;
	a=1>=true;
	a=true>=1;
	a=true>=false;
	x=true>=false;
		//equality operator
	b=x==a; //error: Type mismatch
	b=b==y; //error: Type mismatch
	b=Point1 == Point2; //error: Struct name assignment
	b=(false==1);
	b=(1=="string");
	b=p1==p2; //error: Struct variable assignment
	b=p1.z == p2.c; //error: type mismatch
	//not equals
	b=x!=a; //error: Type mismatch
	b=b!=y; //error: Type mismatch
	b=Point1 != Point2; //error: Struct name assignment
	b=(false!=1);
	b=(1!="string");
	b=p1!=p2; //error: Struct variable assignment
	b=p1.z != p2.c; //error: type mismatch
		//function
	b=f1==f2;
	b=f1!=f2;
	//function calls
	x();
	f3(1);
	x=f3(1<1,true);
	x=f3(true,1);
	cin >> f1;
	cin >> Point1;
	cin >> p1;
	cout << f1;
	cout << f4();
		//Non-bool expression used as an if condition
	if (1+1){}
	if (1-1){}
	if (1*1){}
	if (1/1){}
	if (1-1*1/1){}
	if ("string"){}
	if (x+y){}
	if (y-x){}
	if (p1.z*p2.z){}
	if (p1.z/p2.z){}
	if (1+1){} else{}
	if (1-1){} else{}
	if (1*1){} else{}
	if (1/1){} else{}
	if (1-1*1/1){} else{}
	if ("string"){} else{}
	if (x+y){} else{}
	if (y-x){} else{}
	if (p1.z*p2.z){} else{}
	if (p1.z/p2.z){} else{}
	while (1+1){}
	while (1-1){}
	while (1*1){}
	while (1/1){}
	while (1-1*1/1){}
	while ("string"){}
	while (x+y){}
	while (y-x){}
	while (p1.z*p2.z){}
	while (p1.z/p2.z){}
		//logical operators
	a=!x;
	a=!(1+2);
	a=!(1-2);
	a=!(1*2);
	a=!(1/2);
	a=x&&y;
	a=1&&2;
	a=p1.z&&p2.z;
	a=x||y;
	a=1||2;
	a=p1.z||p2.z;
	a=f1()&&f1();
	a=f1()||f1();
	a=f4()==f4(); //error: equals with void
	a=f4()!=f4(); //error: equals with void
		//error: non int in repeat clause
	repeat(false){} 
	repeat(f5()){}
	repeat(f4()){}
	repeat(1<1){}
	cout << Point1 + 1;          // P + 1 is an error; the write is OK
	x= (true + 3) * 4;         // true + 3 is an error; the * is OK
	a= true && (false || 3);   // false || 3 is an error; the && is OK
	f3("a" * 4, false);            // "a" * 4 is an error; the call is OK
	x= 1 + p1();               // p() is an error; the + is OK
	a= (true + 3) == x;        // true + 3 is an error; the == is OK, regardless of the type of x
    x= true + "hello";    // one error for each of the non-int operands of the +
	return 3+true;

}
int f6(){
	return 5;
	return false;
	return;
}
bool f7(){
	return 5;
	return false;
	return;
}
void f8(){
	return 5;
	return false;
	return;
}